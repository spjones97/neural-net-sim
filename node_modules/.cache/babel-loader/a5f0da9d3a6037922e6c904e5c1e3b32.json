{"ast":null,"code":"export let inference_gpu_execution_data = [];\nexport let inference_gpu_accuracy_data = [];\nexport let inference_cpu_execution_data = [];\nexport let inference_cpu_accuracy_data = [];\nexport let training_execution_data = [];\nexport let training_accuracy_data = [];\nconst ig_max = 12;\nconst ic_max = 34;\nconst t_max = 18;\n/**\r\n * \r\n * @param {Number} f \r\n * @returns {Number}\r\n */\n\nfunction roundTo4(f) {\n  return Math.round(f * 10000) / 10000.0;\n}\n/**\r\n * \r\n * @param {Number} min \r\n * @param {Number} max \r\n * @returns {Number}\r\n */\n\n\nfunction getRandomArbitrary(min, max) {\n  return roundTo4(Math.random() * (max - min) + min);\n}\n\nexport function generateData() {\n  for (let i = 0; i < 100; i++) {\n    let name = i + 1;\n    let ig_deadline = getRandomArbitrary(5, 15);\n    let ic_deadline = getRandomArbitrary(20, 40);\n    let t_deadline = getRandomArbitrary(5, 30);\n    let ig_exec = ig_deadline < ig_max ? roundTo4(getRandomArbitrary(0.8, 0.99) * ig_deadline) : roundTo4(0.9999 * ig_deadline);\n    let ig_exec_ns = ig_deadline < ig_max ? 0 : ig_max;\n    let ic_exec = ic_deadline < ic_max ? roundTo4(getRandomArbitrary(0.8, 0.99) * ic_deadline) : roundTo4(0.9999 * ic_deadline);\n    let ic_exec_ns = ic_deadline < ic_max ? 0 : ic_max;\n    let t_exec = t_deadline < t_max ? roundTo4(getRandomArbitrary(0.8, 0.99) * t_deadline) : roundTo4(0.9999 * t_deadline);\n    let t_exec_ns = t_deadline < t_max ? 0 : t_max;\n    let ig_acc = ig_deadline < ig_max && ig_deadline / ig_max < 0.83 ? roundTo4(1.2 * ig_deadline / ig_max) : 0.9999;\n    let ig_acc_ns = ig_deadline < ig_max ? 0 : 0.9999;\n    let ic_acc = ic_deadline < ic_max && ic_deadline / ic_max < 0.83 ? roundTo4(1.2 * ic_deadline / ic_max) : 0.9999;\n    let ic_acc_ns = ic_deadline < ic_max ? 0 : 0.9999;\n    let t_acc = t_deadline < t_max && t_deadline / t_max < 0.83 ? roundTo4(1.2 * t_deadline / t_max) : 0.9999;\n    let t_acc_ns = t_deadline < t_max ? 0 : 0.9999;\n    inference_gpu_execution_data.push({\n      name: `${name}`,\n      deadline: ig_deadline,\n      exec: ig_exec,\n      exec_ns: ig_exec_ns\n    });\n    inference_gpu_accuracy_data.push({\n      name: `${name}`,\n      acc: ig_acc,\n      acc_ns: ig_acc_ns\n    });\n    inference_cpu_execution_data.push({\n      name: `${name}`,\n      deadline: ic_deadline,\n      exec: ic_exec,\n      exec_ns: ic_exec_ns\n    });\n    inference_cpu_accuracy_data.push({\n      name: `${name}`,\n      acc: ic_acc,\n      acc_ns: ic_acc_ns\n    });\n    training_execution_data.push({\n      name: `${name}`,\n      deadline: t_deadline,\n      exec: t_exec,\n      exec_ns: t_exec_ns\n    });\n    training_accuracy_data.push({\n      name: `${name}`,\n      acc: t_acc,\n      acc_ns: t_acc_ns\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/Spencer/source/neural-net-sim/src/components/dataset.js"],"names":["inference_gpu_execution_data","inference_gpu_accuracy_data","inference_cpu_execution_data","inference_cpu_accuracy_data","training_execution_data","training_accuracy_data","ig_max","ic_max","t_max","roundTo4","f","Math","round","getRandomArbitrary","min","max","random","generateData","i","name","ig_deadline","ic_deadline","t_deadline","ig_exec","ig_exec_ns","ic_exec","ic_exec_ns","t_exec","t_exec_ns","ig_acc","ig_acc_ns","ic_acc","ic_acc_ns","t_acc","t_acc_ns","push","deadline","exec","exec_ns","acc","acc_ns"],"mappings":"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","sourcesContent":["export let inference_gpu_execution_data = [];\r\nexport let inference_gpu_accuracy_data = [];\r\nexport let inference_cpu_execution_data = [];\r\nexport let inference_cpu_accuracy_data = [];\r\nexport let training_execution_data = [];\r\nexport let training_accuracy_data = [];\r\n\r\nconst ig_max = 12;\r\nconst ic_max = 34;\r\nconst t_max = 18;\r\n\r\n/**\r\n * \r\n * @param {Number} f \r\n * @returns {Number}\r\n */\r\n function roundTo4(f) {\r\n    return Math.round(f*10000)/10000.0;\r\n}\r\n\r\n/**\r\n * \r\n * @param {Number} min \r\n * @param {Number} max \r\n * @returns {Number}\r\n */\r\nfunction getRandomArbitrary(min, max) {\r\n    return roundTo4(Math.random() * (max - min) + min);\r\n}\r\n\r\nexport function generateData() {\r\n    for(let i = 0; i < 100; i++) {\r\n        let name = i+1;\r\n        let ig_deadline = getRandomArbitrary(5, 15);\r\n        let ic_deadline = getRandomArbitrary(20, 40);\r\n        let t_deadline = getRandomArbitrary(5, 30);\r\n        let ig_exec = (ig_deadline < ig_max) ? roundTo4(getRandomArbitrary(0.8, 0.99) * ig_deadline) : roundTo4(0.9999 * ig_deadline);\r\n        let ig_exec_ns = (ig_deadline < ig_max) ? 0 : ig_max;\r\n        let ic_exec = (ic_deadline < ic_max) ? roundTo4(getRandomArbitrary(0.8, 0.99) * ic_deadline) : roundTo4(0.9999 * ic_deadline);\r\n        let ic_exec_ns = (ic_deadline < ic_max) ? 0 : ic_max;\r\n        let t_exec = (t_deadline < t_max) ? roundTo4(getRandomArbitrary(0.8, 0.99) * t_deadline) : roundTo4(0.9999 * t_deadline);\r\n        let t_exec_ns = (t_deadline < t_max) ? 0 : t_max;\r\n        let ig_acc = (ig_deadline < ig_max && ig_deadline/ig_max < 0.83) ? roundTo4(1.2 * ig_deadline/ig_max) : 0.9999;\r\n        let ig_acc_ns = (ig_deadline < ig_max) ? 0 : 0.9999;\r\n        let ic_acc = (ic_deadline < ic_max && ic_deadline/ic_max < 0.83) ? roundTo4(1.2 * ic_deadline/ic_max) : 0.9999;\r\n        let ic_acc_ns = (ic_deadline < ic_max) ? 0 : 0.9999;\r\n        let t_acc = (t_deadline < t_max && t_deadline/t_max < 0.83) ? roundTo4(1.2 * t_deadline/t_max) : 0.9999;\r\n        let t_acc_ns = (t_deadline < t_max) ? 0 : 0.9999;\r\n    \r\n        inference_gpu_execution_data.push({\r\n            name: `${name}`, \r\n            deadline: ig_deadline, \r\n            exec: ig_exec, \r\n            exec_ns: ig_exec_ns,\r\n        });\r\n        inference_gpu_accuracy_data.push({\r\n            name: `${name}`,\r\n            acc: ig_acc,\r\n            acc_ns: ig_acc_ns\r\n        });\r\n        inference_cpu_execution_data.push({\r\n            name: `${name}`, \r\n            deadline: ic_deadline, \r\n            exec: ic_exec, \r\n            exec_ns: ic_exec_ns,\r\n        });\r\n        inference_cpu_accuracy_data.push({\r\n            name: `${name}`,\r\n            acc: ic_acc,\r\n            acc_ns: ic_acc_ns\r\n        });\r\n        training_execution_data.push({\r\n            name: `${name}`, \r\n            deadline: t_deadline, \r\n            exec: t_exec, \r\n            exec_ns: t_exec_ns,\r\n        });\r\n        training_accuracy_data.push({\r\n            name: `${name}`,\r\n            acc: t_acc,\r\n            acc_ns: t_acc_ns\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}